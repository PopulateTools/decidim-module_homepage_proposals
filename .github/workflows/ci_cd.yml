name: "CI/CD"
on: [push]

env:
  CI: "true"
  CODECOV: "true"
  RUBY_VERSION: 3.1.2
  DECIDIM_MODULE: .

jobs:
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@master
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
      - name: Recover Ruby dependency cache
        uses: actions/cache@v1
        with:
          path: ./vendor/bundle
          key: ${{ runner.OS }}-rubydeps-${{ hashFiles('Gemfile.lock') }}
          restore-keys: |
            ${{ runner.OS }}-rubydeps-${{ env.cache-name }}-
            ${{ runner.OS }}-rubydeps-
            ${{ runner.OS }}-
      - run: bundle install --path vendor/bundle --jobs 4 --retry 3
        name: Install Ruby deps
      - run: bundle exec rubocop -P
        name: Lint ruby files
  tests:
    name: Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    services:
      postgres:
        image: postgres:11
        ports: ["5432:5432"]
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          POSTGRES_PASSWORD: postgres
    env:
      DATABASE_USERNAME: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_HOST: localhost
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@v0.3.0
        if: "github.ref != 'refs/heads/develop'"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "::set-output name=dir::$(npm get cache)-${{ env.DECIDIM_MODULE }}"
      - uses: actions/cache@v2
        id: npm-cache
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            npm-
      - run: bundle exec rake test_app
        name: Create test app
      - run: mkdir -p ./spec/decidim_dummy_app/tmp/screenshots
        name: Create the screenshots folder
      - uses: nanasess/setup-chromedriver@v2
      - run: npm install
        name: Add dependencies
      - name: Run precompile if needed
        run: |
          if [[ -d "app/views" ]] || [[ -d "spec/mailers" ]] || [[ -d "spec/system" ]]; then
            cd "./spec/decidim_dummy_app"
            bundle exec rake decidim_module_homepage_proposals:webpacker:install
            bundle exec rails assets:precompile
          else
            echo "No need to precompile assets since system folder is empty"
          fi
      - name: Check for zeitwerk errors
        run: |
          cd "./spec/decidim_dummy_app"
          bundle exec rails zeitwerk:check
      - run: bundle exec rspec
        name: RSpec
        working-directory: ${{ env.DECIDIM_MODULE }}
      - uses: codecov/codecov-action@v1
        with:
          file: ./coverage/coverage.xml
          name: ${{ env.DECIDIM_MODULE }}
      - uses: actions/upload-artifact@v2-preview
        if: always()
        with:
          name: screenshots
          path: ./spec/decidim_dummy_app/tmp/screenshots
          if-no-files-found: ignore
  release:
    if: "github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release')"
    needs: [tests, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      - name: Setup git and gh
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
      - run: gem install parse_gemspec-cli
        name: Install gem parser
      - run: echo "::set-output name=tag::$(parse-gemspec-cli *.gemspec | jq .'version')"
        name: Set tag version
        id: set_tag
      - name: Add tag and push
        run: |
          git tag
          git push --tags
      - name: Create release
        run: gh release create ${{ steps.set_tag.outputs.tag }} --generate-notes
  publish:
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Publish to RubyGems
        run: |
          mkdir -p $HOME/.gem
          touch $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          printf -- "---\n:rubygems_api_key: ${GEM_HOST_API_KEY}\n" > $HOME/.gem/credentials
          gem build *.gemspec
          gem push *.gem
        env:
          GEM_HOST_API_KEY: "${{secrets.RUBYGEMS_API_KEY}}"
